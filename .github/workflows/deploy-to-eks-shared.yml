name: Deploy to EKS

on:
  #push:
    #branches:
      #- dev
      #- devop
  workflow_dispatch:
  workflow_call:
    inputs:
      config-path:
        required: false
        type: string
    secrets:
      token:
        required: false
env:
  IMAGE_NAME: ${{ vars.AWS_ECR }}/${{ github.event.repository.name }}
  SERVICE_NAME: ${{ github.event.repository.name }}
  PROJECT: ${{ vars.PROJECT }}
  IMAGE_TAG: latest
  AWS_ECR: ${{ vars.AWS_ECR }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  REPLICAS: ${{ vars.REPLICAS || '1' }}
  EKSCTL_VERSION: ${{ vars.EKSCTL_VERSION || '0.165.0' }}
  #CLUSTER: ${{ vars.AWS_EKS_CLUSTER }}
  GH_TOKEN: ${{ github.token }}

jobs:
  build-and-push-to-ecr:
    runs-on: ubuntu-22.04
    #runs-on: [self-hosted, linux]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '>=1.17.0'

      - name: go version
        run: go version

      - name: Login to docker registry
        run: |
          aws ecr get-login-password --region ${{env.AWS_DEFAULT_REGION}} | docker login --username AWS --password-stdin ${{ env.AWS_ECR }}
          aws ecr describe-repositories --repository-names ${{env.SERVICE_NAME}} || aws ecr create-repository --image-tag-mutability MUTABLE --repository-name ${{env.SERVICE_NAME}}

      - name: Build image
        run: |
          BRANCH=$(git branch --show-current)
          if [ ! -z "$CONFIG_PATH" ];then
            CONFIG=$CONFIG_PATH
          else
            CONFIG=.env.$BRANCH
          fi
          BUILD=$(date +%Y%m%d%H)
          echo $BUILD > build.info
          cat build.info
          source $CONFIG
          go get
          cp config.yml config-template.yml
          set -a && . ./$CONFIG && set +a && envsubst < config-template.yml > config.yml
          docker build --pull --progress plain -t ${{env.IMAGE_NAME}}:$BUILD .
          docker push ${{env.IMAGE_NAME}}:$BUILD
          docker tag ${{env.IMAGE_NAME}}:$BUILD ${{env.IMAGE_NAME}}:$BRANCH
          docker push  ${{env.IMAGE_NAME}}:$BRANCH
          echo ${{env.IMAGE_NAME}}:$BUILD
          # gh variable set BUILD <<< $BUILD

  deploy-to-eks:
    needs: build-and-push-to-ecr
    runs-on: ubuntu-22.04
    #runs-on: [self-hosted, linux]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Check AWS identity    
        run: aws sts get-caller-identity

      - name: setup eksctl
        run: |
          ARCH=amd64
          PLATFORM=$(uname -s)_$ARCH
          curl -sLO "https://github.com/eksctl-io/eksctl/releases/download/v${{ env.EKSCTL_VERSION }}/eksctl_$PLATFORM.tar.gz"
          tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
          sudo mv /tmp/eksctl /usr/bin
          eksctl version

      - name: save EKS kubeconfig
        run: |
            BRANCH=$(git branch --show-current)
            source .env.$BRANCH
            [ -z "$CLUSTER" ] && CLUSTER=${{ vars.AWS_EKS_CLUSTER }}
            [ "$BRANCH" == "prod" ] && CLUSTER=${{ vars.AWS_EKS_PROD_CLUSTER }}
            eksctl utils write-kubeconfig --cluster=$CLUSTER
            echo "will deploy to cluster $CLUSTER"

      - name: Kubectl
        run: kubectl get nodes

      - name: Kubectl Deploy
        run: |
          # BUILD=$(gh variable list |grep BUILD |awk '{print $2}')
          BUILD=$(date +%Y%m%d%H)
          echo $BUILD
          BRANCH=$(git branch --show-current)
          if [ ! -z "$CONFIG_PATH" ];then
            CONFIG=$CONFIG_PATH
          else
            CONFIG=.env.$BRANCH
          fi
          cat $CONFIG
          set -a
          source $CONFIG
          NAMESPACE_NAME=${{ env.PROJECT}}-$BRANCH
          export NAMESPACE_NAME
          echo $NAMESPACE_NAME
          IMAGE_NAME=$IMAGE_NAME:$BUILD
          cat manifests/deployment-template.yml manifests/ports.yml| envsubst > manifests/deployment.yml
          cat manifests/deployment.yml
          kubectl get namespace $NAMESPACE_NAME
          if [ $? -ne 0 ];then 
            kubectl create namespace $NAMESPACE_NAME
          fi
          kubectl apply -f manifests/deployment.yml
          kubectl -n $NAMESPACE_NAME get deployments
